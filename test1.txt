 public List<users> getUsersForPage(int currentPage, int maxRows, string search,string sortBy,string sortOrder)
    {
        var user = (from u in _context.Users
                    where u.Isdeleted == false
                    select new users
                    {
                        userid = u.Userid,
                        name = u.Firstname + " " + u.Lastname,
                        Email = u.Email,
                        IsActive = u.Isactive ?? false,
                        phone = u.Phonenumber.ToString(),
                        role = _context.Roles.FirstOrDefault(r => r.Roleid == u.Roleid).Rolename,
                        profilepic = u.Profilephoto
                    });

        user = user.Where(x => search == null || x.name.ToLower().Contains(search.ToLower()));

        if (sortBy.Equals("name", StringComparison.OrdinalIgnoreCase))
        {
            user = sortOrder.Equals("asc", StringComparison.OrdinalIgnoreCase)
                ? user.OrderBy(u => u.Firstname).ThenBy(u => u.Lastname)
                : user.OrderByDescending(u => u.Firstname).ThenByDescending(u => u.Lastname);
        }
        else if (sortBy.Equals("role", StringComparison.OrdinalIgnoreCase))
        {
            user = sortOrder.Equals("asc", StringComparison.OrdinalIgnoreCase)
                ? user.OrderBy(u => u.role)
                : user.OrderByDescending(u => u.role);
        }

        var userlist = user.Skip((currentPage - 1) * maxRows)
                     .Take(maxRows).ToList();
        return userlist;
    }
